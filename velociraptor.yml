# allow:
#   - write
#   - read
#   - net
#   - env

# envFile:
#   - .env

scripts:
  main:
    desc: Runs main script
    cmd: main.ts

  server:
    desc: Starts deploy server
    cmd: server.ts
    watch: true
    allow:
      - read
      - net
      - env

  docs:
    - echo "visit https://doc.deno.land/builtin/stable"
    - google-chrome https://doc.deno.land/builtin/stable || sh $BROWSER https://doc.deno.land/builtin/stable

  deps:
    desc: Update dependencies with ensuring pass tests
    cmd: udd deps.ts --test="vr test"

  lint:
    desc: Runs lint
    cmd: deno lint --ignore=cov_profile

  fmt:
    desc: Runs format
    cmd: deno fmt --ignore=cov_profile

  # post-commit:
  #   desc: Commit formatted files
  #   env:
  #     VR_HOOKS: "false"
  #   cmd: |
  #     FILES=$(git diff --name-only --diff-filter=ACMR "*.*")
  #         [ -z "$FILES" ] && exit 0
  #         echo "$FILES" | xargs git add &&
  #         git commit -m "format: apply auto format"
  #   gitHook: post-commit
  pre-commit:
    desc: Lints and formats staged files
    cmd: |
      FILES=$(git diff --staged --name-only --diff-filter=ACMR "*.ts")
          echo $FILES;
          [ -z "$FILES" ] && exit 0
          echo "$FILES" | xargs deno lint
          echo "$FILES" | xargs deno fmt
          # echo "$FILES" | xargs git add
    gitHook: pre-commit

  test:
    desc: Runs the tests
    cmd: deno test --reload
    gitHook: pre-push

  cov:
    desc: Shows uncovered lists
    cmd:
      - vr test --coverage=cov_profile
      - deno coverage cov_profile

  ci:
    desc: Runs lint, check format and test
    cmd:
      - vr lint
      - vr fmt --check
      - vr test

  commitlint:
    # cmd: echo -- ${GIT_ARGS[1]}; echo --- ${GIT_ARGS}
    # cmd: commitlint -x @commitlint/config-conventional -e
    # ${GIT_ARGS[1]}
    cmd: deno run --allow-read="./.git" commitlint.ts
    gitHook: commit-msg
